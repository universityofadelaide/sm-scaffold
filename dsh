#!/bin/bash

# `set +e` is used to continue on errors throughout this script.
set -euo pipefail
IFS=$'\n\t'

# Global defines.
MACHINE='default'

# localhost is reserved in Mac OS, needs to be test. Bonjour!
export DOMAIN=${DOMAIN:-'test'}

# Used as the prefix for docker networking, container naming and nginx hostname.
export PROJECT=$(basename ${PWD} | sed 's/[-_]//g')

# Set the variable for the homedir for the utility container
PROJECT_USER_HOME=${HOME}/.dsh/${PROJECT}/code

# Setup some functions to output warnings.
notice() {
  printf "\e[32;01m$1\e[39;49;00m\n"
}

warning() {
  printf "\e[33;01m$1\e[39;49;00m\n"
}

error() {
  printf "\e[31;01m$1\e[39;49;00m\n"
}

if [ "$(uname)" == "Darwin" ]; then
  HOST_TYPE='mac'
else
  HOST_TYPE='linux'
fi

if [ -f /.dockerenv ]; then
  error "Inception error - you can't run $0 within a docker container."
  exit
fi

setup_nginx_proxy() {
  # Yes macOS doesn't ship with bash 4.x :(
  # A way to test if variable is defined
  if [ -n "${GITLAB_CI+1}" ]; then
    # nginx proxy doesn't need to run for CI.
    return;
  fi
  if ! docker ps | grep "nginx-proxy" > /dev/null; then
    if docker ps -a | grep "nginx-proxy" > /dev/null; then
      docker start nginx-proxy
    else
      docker run -d -p 8080:80 \
        -v /var/run/docker.sock:/tmp/docker.sock:ro \
        --restart always --name nginx-proxy \
        jwilder/nginx-proxy
    fi
  fi

  if ! docker ps | grep "nginx-proxy" > /dev/null; then
    error "jwilder/nginx-proxy could not be started."
  fi

  notice "Connecting nginx-proxy to the network."
  set +e
  docker network connect ${PROJECT}_default nginx-proxy
  set -e
}

setup_ssh_agent_proxy() {
  if docker ps -a | grep "ssh-agent" > /dev/null; then
    docker start ssh-agent
  else
    notice "Creating ssh agent proxy, because no ssh-agent forwarding available on macOS :( "
    docker run -u ${UID} -d -v ssh:/ssh --name=ssh-agent whilp/ssh-agent:latest
    setup_ssh_agent_keys
  fi

  if ! docker ps | grep "ssh-agent" > /dev/null; then
    error "whilp/ssh-agent could not be started."
  fi

  notice "Connecting ssh-agent to the network."
  set +e
  docker network connect ${PROJECT}_default ssh-agent
  set -e
}

setup_ssh_agent_keys() {
  # Get all your keys in your agent
  CURRENT_SSH_KEYS=$(ssh-add -l | awk '{print $3}')
  notice "Adding ssh keys to agent proxy"
  # Add keys into the ssh agent proxy
  docker run -u ${UID} --rm -v ssh:/ssh -v $HOME:$HOME -it whilp/ssh-agent:latest ssh-add ${CURRENT_SSH_KEYS}
}

setup_dnsmasq() {
  # Check dnsmasq is already setup before we start processing.
  # We now configure dnsmasq everytime, docker-machine ip changes.
  set +e
  # OS X special config
  if [ ${HOST_TYPE} == 'mac' ]; then
    notice "Attempting to configure dnsmasq"
    # Test to see if dnsmasq.conf exists
    if [ ! -f /usr/local/etc/dnsmasq.conf ]; then
      notice "Dnsmasq.conf doesn't exist, creating one..."
      # copy example file across
      mkdir -p /usr/local/etc
      touch /usr/local/etc/dnsmasq.conf
    fi
    # Write to dnsconf
    notice "Writing dnsconf"
    # Detect if running docker for mac.
    if [[ $(docker version --format "{{.Server.KernelVersion}}") == *-moby ]]; then
      echo "address=/${DOMAIN}/127.0.0.1" > /usr/local/etc/dnsmasq.conf
    else
      # Use the docker machine ip address.
      echo "address=/${DOMAIN}/$(docker-machine ip ${MACHINE})" > /usr/local/etc/dnsmasq.conf
    fi

    # Write resolver if none exists.
    if [ ! -f /etc/resolver/${DOMAIN} ]; then
      notice "Resolver does not exist for ${DOMAIN}, creating one..."
      sudo bash -c 'echo "nameserver 127.0.0.1" > /etc/resolver/'${DOMAIN}''
    fi
    # Stop start dnsmasq
    notice "Restarting dnsmasq with homebrew services."
    sudo brew services stop dnsmasq
    sudo brew services start dnsmasq
  else
    ping -c 1 ${PROJECT}.${DOMAIN} 2>&1 > /dev/null
    if [[ $? != 0 ]]; then
      notice "Attempting to configure dnsmasq"
      if [ ! -f /etc/dnsmasq.d/${DOMAIN} ]; then
        echo "address=/${DOMAIN}/127.0.0.1" | sudo tee -a /etc/dnsmasq.d/${DOMAIN} > /dev/null
        notice "Restarting dnsmasq"
        sudo service dnsmasq restart
      else
        error "Dnsmasq not configured, please configure manually. Read readme documentation for further information."
      fi
    fi
  fi
  set -e
}

setup_docker_machine() {
  # If we're not running on a linux machine, we need to be using docker-machine.
  if [ ${HOST_TYPE} == 'mac' ]; then
    # Detect if user is running docker for mac.
    if [[ $(docker version --format "{{.Server.KernelVersion}}") == *-moby ]]; then
      # echo "Docker for Mac detected. Attempting to setup."
      error "Docker for Mac is not currently supported. Please use Docker Toolbox as per readme documentation to continue."
      exit
    else
      set +e
      STATUS=$(docker-machine status ${MACHINE})

      # Check if the docker machine exists already, create one if not.
      if [[ $? == 1 ]]; then
        notice "No ${MACHINE} environment found."
        create_machine
      fi
      set -e

      if [[ ${STATUS} == 'Stopped' ]]; then
        notice "Docker machine not running, starting now."
        docker-machine start ${MACHINE}
      fi

      if [[ ${STATUS} == 'Saved' ]]; then
        notice "Docker machine in saved state, restarting now."
        docker-machine start ${MACHINE}
      fi

      if [[ ${STATUS} == 'Error' ]]; then
        notice "Docker machine vm does not exist but docker-machine still has it registered, remove then create."
        docker-machine rm ${MACHINE}
        create_machine
      fi

      notice "Loading vars for docker machine."
      eval "$(docker-machine env ${MACHINE})"
    fi
  fi

  if ! docker network ls | grep ${PROJECT}_default > /dev/null; then
    notice "Creating project docker network."
    docker network create ${PROJECT}_default
  fi

  # Determine network gateway and export it so that docker compose can insert it
  export DOCKER_HOST_IP=$(docker network inspect --format '{{ (index .IPAM.Config 0).Gateway}}' ${PROJECT}_default | cut -d'/' -f1)
}

setup_xdebug() {
  notice "Setting up for xdebug."
  # If using docker-machine this corrects the xdebug remote host with your actual
  # host ip not the docker-machine host ip.
  # @TODO - figure out how this works for docker for mac
  if [ ${HOST_TYPE} == 'mac' ]; then
    LOCAL_IP=$(ifconfig | sed -En 's/127.0.0.1//;s/.*inet (addr:)?(([0-9]*\.){3}[0-9]*).*/\2/p'| head -1)
    docker exec -t "${PROJECT}_web_1" sed -i "s/^xdebug\.remote_host=.*$/xdebug.remote_host=${LOCAL_IP}/" /etc/php/7.0/mods-available/xdebug.ini
  else
    docker exec -t "${PROJECT}_web_1" sed -i "s/^xdebug\.remote_host=.*$/xdebug.remote_host=${DOCKER_HOST_IP}/" /etc/php/7.0/mods-available/xdebug.ini
  fi
  set +e
  docker exec -t -u root "${PROJECT}_web_1" apachectl graceful 2> /dev/null
  set -e
}

create_machine() {
  notice "Creating new machine."
  docker-machine create --driver virtualbox --engine-insecure-registry registry.${DOMAIN}:5000 ${MACHINE}
  # use nfs, configure all directories to root
  # if no docker-machine-nfs error out
  if ! type "docker-machine-nfs" > /dev/null; then
    error "Please install 'docker-machine-nfs' using \n  $ brew install docker-machine-nfs "
  fi
  docker-machine-nfs ${MACHINE} -f --nfs-config="-alldirs -maproot=0"
  docker-machine ssh ${MACHINE} ln -s $(pwd)/code code
  docker-machine ssh ${MACHINE} sudo mv code /code

  setup_dnsmasq
}

dsh_shell() {
  dsh_start
  SHELL_USER=${USER}
  SHELL_PID=$$

  notice "Starting shell."

  if [ ! -d ${PROJECT_USER_HOME} ]; then
    mkdir -p ${PROJECT_USER_HOME}
    cp ~/.bashrc ${PROJECT_USER_HOME}/
    cp ~/.profile ${PROJECT_USER_HOME}/
    cp ~/.gitconfig ${PROJECT_USER_HOME}/
    echo "cd /web" >> ${PROJECT_USER_HOME}/.bashrc
    notice "Project user home directory setup."
  fi

  if [ ! -z "${SSH_AUTH_SOCK}" ]; then
    SOCK=$(dirname ${SSH_AUTH_SOCK})
    CONTAINER_SOCK=${SOCK}
    if [ ${HOST_TYPE} == 'mac' ]; then
      # Run the agent proxy first.
      setup_ssh_agent_proxy
      # Change vars to mount the /ssh volume create by the ssh_agent_proxy.
      SOCK="ssh"
      CONTAINER_SOCK="/ssh"
      SSH_AUTH_SOCK="/ssh/auth/sock"
    fi

    CONTAINER=${PROJECT}_utility
    if docker ps | grep "${CONTAINER}\$" > /dev/null; then
        echo "Shell already running"
        exit
    fi
    if docker ps -a | grep "${CONTAINER}\$" > /dev/null; then
        docker start -ia ${CONTAINER}
    else
        set +e
        docker run -it -h utility --name ${CONTAINER} \
          -e USER=${SHELL_USER} \
          -e UID=${UID} \
          -v ${SOCK}:${CONTAINER_SOCK} -e SSH_AUTH_SOCK=${SSH_AUTH_SOCK} \
          -v ${PWD}:/web \
          -v ${HOME}/.dsh/${PROJECT}/code:/code \
          -v ${HOME}/.composer:/code/.composer \
          --net=${PROJECT}_default \
          uofa/utility-php7 /entry.sh
        set -e
    fi
  fi
}

dsh_run() {
  dsh_start
  SHELL_USER=${USER}
  SHELL_PID=$$
  DSH_IMAGE=${1}
  DSH_COMMAND=${*:2}

  notice "Executing command."

  mkdir -p ${HOME}/.dsh/${PROJECT}/code

  if [ ! -z "${SSH_AUTH_SOCK}" ]; then
    SOCK=$(dirname ${SSH_AUTH_SOCK})
    CONTAINER_SOCK=${SOCK}
    if [ ${OSTYPE} != 'linux-gnu' ]; then
      # Run the agent proxy first.
      setup_ssh_agent_proxy
      # Change vars to mount the /ssh volume create by the ssh_agent_proxy.
      SOCK="ssh"
      CONTAINER_SOCK="/ssh"
      SSH_AUTH_SOCK="/ssh/auth/sock"
    fi
    set +e
    docker run -t --rm \
      -e USER=${SHELL_USER} \
      -e UID=${UID} \
      -v ${SOCK}:${CONTAINER_SOCK} -e SSH_AUTH_SOCK=${SSH_AUTH_SOCK} \
      -v ${PWD}:/web \
      -v ${HOME}/.dsh/${PROJECT}/code:/code \
      -v ${HOME}/.composer:/code/.composer \
      --net=${PROJECT}_default \
      ${DSH_IMAGE} /entry.sh ${DSH_COMMAND}
    set -e
  fi
}

dsh_exec() {
  dsh_start
  DSH_IMAGE=${1}
  DSH_USER=${2}
  DSH_COMMAND=${*:3}

  notice "Executing command."

  set +e
  docker exec -t \
    -u ${DSH_USER} \
    ${DSH_IMAGE} sh -c "${DSH_COMMAND}"
  set -e
}

dsh_start() {
  setup_docker_machine
  setup_nginx_proxy
  docker-compose up -d
  setup_xdebug
  notice "Please wait about 10 seconds for the database to settle.
You can now access the site from http://${PROJECT}.${DOMAIN}:8080.
Project files are available in /web, You may need to build and
install your project before it starts working.
Connecting via ./dsh shell and running robo build is a common next step.\n"
}

dsh_stop() {
  notice "Stopping containers."
  docker-compose stop
  if docker network ls | grep ${PROJECT}_default > /dev/null; then
    notice "Disconnecting proxy."
    set +e
    docker network disconnect ${PROJECT}_default nginx-proxy
    if [ ${HOST_TYPE} == 'mac' ]; then
      notice "Disconnect ssh-agent proxy."
      docker network disconnect ${PROJECT}_default ssh-agent
    fi
    notice "Removing network."
    docker network rm ${PROJECT}_default
    set -e
  fi
}

dsh_purge() {
  dsh_stop
  notice "Taking down containers."
  set +e
  docker-compose down -v
  docker stop ${PROJECT}_utility
  docker rm ${PROJECT}_utility
  notice "Removing containers."
  docker-compose rm -f
  notice "Removing project user home directory."
  if [ -d ${PROJECT_USER_HOME} ]; then
    rm -rf ${PROJECT_USER_HOME}
  fi
  set -e
}

dsh_status() {
  if ! docker ps | grep ${PROJECT}; then
    notice "${PROJECT} not running"
  fi
}

dsh_logs() {
  if docker ps | grep ${PROJECT} > /dev/null; then
    docker logs -f --tail 1 ${PROJECT}_web_1
  fi
}

dsh_install_tools() {
 # for macOS, linux ppl please add your tests here.
 if [ ${HOST_TYPE} != 'mac' ]; then
   error "Only for mac users, you yourself before wrecking thou self \n \n ... fool!"
   exit
 fi

  if ! which brew > /dev/null; then
    error "Missing homebrew, please install. \n http://brew.sh/"
    exit;
  else
    notice "You have homebrew installed!"
  fi

  if ! which docker-machine > /dev/null; then
    error "Missing the docker toolbox, please install. \n https://www.docker.com/products/docker-toolbox"
    exit;
  else
    notice "You have the docker toolbox installed!"
  fi

  if ! which docker-machine-nfs > /dev/null; then
    warning "Missing docker-machine-nfs \n Now attempting to install docker-machine-nfs with homebrew \n"
    brew install docker-machine-nfs
  else
    notice "You have docker-machine-nfs installed!"
  fi

  if ! brew ls --versions dnsmasq > /dev/null; then
    warning "Missing dnsmasq \n Now attempting to install dnsmasq with homebrew \n"
    brew install dnsmasq
    exit;
  else
    notice "You have dnsmasq installed"
  fi
}

dsh_help() {
  printf "\nUsage: dsh COMMAND\n\n
Commands:\n
\thelp\tShow this help.\n
\tinstall\tInstall dependancies and tools for development.\n
\tpurge\tPurge the docker containers, network and proxy and remove all data.\n
\tshell\tStart a shell which is connected to the containers and can be used to run commands.\n
\tstart\tStart the docker containers, network and proxy.\n
\tstatus\tShow the status of this projects containers.\n
\tstop\tStop the docker containers, network and proxy, but keep data for a re-start.\n
\nIf no command is given, shell is the default.\n
Commands can be shortened to their uniqe component, eg ./dsh sh is the same as ./dsh shell.\n\n"
}

# Set a default command to show usage when no arguments provided.
COMMAND=${1:-default}

case ${COMMAND} in
  e*)
    dsh_exec ${@:2}
    ;;
  h*|-h|--help)
    dsh_help
    ;;
  i*)
    dsh_install_tools
    ;;
  l*)
    dsh_logs
    ;;
  p*)
    dsh_purge
    ;;
  r*)
    dsh_run ${@:2}
    ;;
  sh*|ss*)
    dsh_shell
    ;;
  star*)
    dsh_start
    ;;
  stat*)
    dsh_status
    ;;
  sto*)
    dsh_stop
    ;;
  *)
    warning "Unknown command specified, defaulting to shell. For other options try:\n$0 [help|logs|purge|shell|start|status|stop].\n"
    dsh_shell
    ;;
esac
